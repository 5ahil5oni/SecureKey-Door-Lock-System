#include <LiquidCrystal.h>
#include <Keypad.h>
#include <Servo.h>
#include <EEPROM.h>

// Servo motor definitions
#define SERVO_PIN 6
#define SERVO_LOCK_POS 20
#define SERVO_UNLOCK_POS 90
Servo lockServo;

// LCD setup
LiquidCrystal lcd(12, 11, 10, 9, 8, 7);

// Keypad setup
const byte KEYPAD_ROWS = 4;
const byte KEYPAD_COLS = 4;
byte rowPins[KEYPAD_ROWS] = {5, 4, 3, 2};
byte colPins[KEYPAD_COLS] = {A3, A2, A1, A0};
char keys[KEYPAD_ROWS][KEYPAD_COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, KEYPAD_ROWS, KEYPAD_COLS);

// Default password and EEPROM address
const int passwordLength = 4;
char defaultPassword[passwordLength + 1] = "5555"; // Added null terminator
int eepromAddress = 0;

// State variables
bool isUnlocked = false;
unsigned long unlockTime = 0;
const unsigned long AUTO_LOCK_DELAY = 10000; // 10 seconds auto-lock

// Function prototypes
void verifyOldPassword();
void lock();
void unlock();
String inputPassword();
bool isPasswordCorrect(String enteredPassword);
void setNewPassword();
void readPassword(char* password);
void writePassword(const char* password);
void initializeEEPROM();

// Function to initialize EEPROM with default password
void initializeEEPROM() {
  // Check if EEPROM is uninitialized (first byte is 0xFF)
  if (EEPROM.read(eepromAddress) == 0xFF) {
    writePassword(defaultPassword);
  }
}

// Function to read password from EEPROM
void readPassword(char* password) {
  for (int i = 0; i < passwordLength; i++) {
    password[i] = EEPROM.read(eepromAddress + i);
    // Ensure valid characters
    if (password[i] < '0' || password[i] > '9') {
      password[i] = '0'; // Default to '0' if invalid
    }
  }
  password[passwordLength] = '\0'; // Add null terminator
}

// Function to write password to EEPROM
void writePassword(const char* password) {
  for (int i = 0; i < passwordLength; i++) {
    EEPROM.write(eepromAddress + i, password[i]);
  }
}

void verifyOldPassword() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter Old Code:");
  String oldPassword = inputPassword();
  if (isPasswordCorrect(oldPassword)) {
    setNewPassword();
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Incorrect Code");
    delay(2000);
  }
}

void setup() {
  // Initialize LCD
  lcd.begin(16, 2);

  // Initialize servo
  lockServo.attach(SERVO_PIN);
  
  // Initialize EEPROM
  initializeEEPROM();
  
  // Start in locked state
  lock();

  // Welcome message
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Welcome!");
  lcd.setCursor(0, 1);
  lcd.print("Smart Door Lock");
  delay(2000);
}

void loop() {
  // Check for auto-lock timeout
  if (isUnlocked && (millis() - unlockTime > AUTO_LOCK_DELAY)) {
    lock();
  }
  
  if (!isUnlocked) {
    // Door is locked - ask for password
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Enter Code:");
    String enteredPassword = inputPassword();

    if (isPasswordCorrect(enteredPassword)) {
      unlock();
    } else {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Access Denied");
      delay(2000);
    }
  } else {
    // Door is unlocked - show options
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("A: Change Code");
    lcd.setCursor(0, 1);
    lcd.print("#: Lock");
    
    char key = keypad.getKey();
    if (key == 'A') {
      verifyOldPassword();
    } else if (key == '#') {
      lock();
    }
    
    delay(100); // Small delay to prevent excessive polling
  }
}

String inputPassword() {
  String password = "";
  lcd.setCursor(0, 1);
  
  // Clear the input line
  for (int i = 0; i < 16; i++) {
    lcd.print(" ");
  }
  lcd.setCursor(0, 1);
  
  while (password.length() < passwordLength) {
    char key = keypad.getKey();
    if (key && key >= '0' && key <= '9') {
      password += key;
      lcd.print('*');
      delay(100); // Small delay for better user experience
    }
  }
  return password;
}

bool isPasswordCorrect(String enteredPassword) {
  char storedPassword[passwordLength + 1];
  readPassword(storedPassword);
  
  // Compare passwords
  for (int i = 0; i < passwordLength; i++) {
    if (enteredPassword[i] != storedPassword[i]) {
      return false;
    }
  }
  return true;
}

void setNewPassword() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter New Code:");
  String newPassword = inputPassword();
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Confirm Code:");
  String confirmPassword = inputPassword();
  
  if (newPassword.equals(confirmPassword)) {
    writePassword(newPassword.c_str());
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Code Changed!");
    lcd.setCursor(0, 1);
    lcd.print("Successfully");
    delay(2000);
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Code Mismatch");
    lcd.setCursor(0, 1);
    lcd.print("Try Again");
    delay(2000);
  }
}

void lock() {
  lockServo.write(SERVO_LOCK_POS);
  isUnlocked = false;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Door Locked");
  delay(1000);
}

void unlock() {
  lockServo.write(SERVO_UNLOCK_POS);
  isUnlocked = true;
  unlockTime = millis();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Door Unlocked");
  delay(1000);
}